import java.io.*;
import java.util.*;

// User-defined class for generic stack
class Stack<T> {
    // ArrayList to store stack elements
    ArrayList<T> A;
    // Default value of top variable when stack is empty
    int top = -1;
    // Variable to store size of stack
    int size;

    // Constructor to initialize the stack
    Stack(int size) {
        this.size = size;
        this.A = new ArrayList<T>(size);
    }

    // Method 1: To push a generic element into the stack
    void push(T X) {
        // Checking if stack is full
        if (top + 1 == size) {
            System.out.println("Stack Overflow");
        } else {
            // Increment top to go to the next position
            top = top + 1;
            // If the array has space, update the element at the top position
            if (A.size() > top)
                A.set(top, X);
            else
                // Otherwise, add the new element
                A.add(X);
        }
    }

    // Method 2: To return the topmost element of the stack
    T top() {
        // If stack is empty
        if (top == -1) {
            System.out.println("Stack Underflow");
            return null;
        }
        // Else, return the topmost element
        else
            return A.get(top);
    }

    // Method 3: To delete the last element of the stack
    void pop() {
        // If stack is empty
        if (top == -1) {
            System.out.println("Stack Underflow");
        } else {
            // Delete the last element by decrementing the top
            top--;
        }
    }

    // Method 4: To check if the stack is empty or not
    boolean empty() {
        return top == -1;
    }

    // Method 5: To print the stack
    @Override
    public String toString() {
        StringBuilder ans = new StringBuilder();
        for (int i = 0; i <= top; i++) {
            ans.append(A.get(i)).append(" -> ");
        }
        return ans.toString();
    }
}

// Main class
public class GFG {
    // Main driver method
    public static void main(String[] args) {
        // Integer Stack
        Stack<Integer> s1 = new Stack<>(3);
        // Pushing elements to integer stack
        s1.push(10); // Element 1
        s1.push(20); // Element 2
        s1.push(30); // Element 3

        // Print the stack elements after pushing
        System.out.println("s1 after pushing 10, 20, and 30:\n" + s1);

        // Now, pop from stack s1
        s1.pop();
        // Print the stack elements after popping
        System.out.println("s1 after pop:\n" + s1);

        // String Stack
        Stack<String> s2 = new Stack<>(3);
        // Pushing elements to string stack
        s2.push("hello"); // Element 1
        s2.push("world"); // Element 2
        s2.push("java");  // Element 3

        // Print string stack after pushing elements
        System.out.println("\ns2 after pushing 3 elements:\n" + s2);

        // Pushing another element to the stack
        s2.push("GFG"); // Element 4
        System.out.println("s2 after pushing 4th element:\n" + s2);

        // Float Stack
        Stack<Float> s3 = new Stack<>(2);
        // Pushing elements to float stack
        s3.push(100.0f); // Element 1
        s3.push(200.0f); // Element 2

        // Print float stack after pushing elements
        System.out.println("\ns3 after pushing 2 elements:\n" + s3);

        // Print and display the top element of stack s3
        System.out.println("Top element of s3:\n" + s3.top());
    }
}
